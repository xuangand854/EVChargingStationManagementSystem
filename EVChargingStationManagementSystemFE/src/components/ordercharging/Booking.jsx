
import React, { useState, useEffect } from "react";
import { ToastContainer, toast } from "react-toastify";
import { addBooking } from "../../API/Booking.js";
import { getVehicleModels } from "../../API/Admin";
import { getEVDriverProfile } from "../../API/EVDriver.js";
import "react-toastify/dist/ReactToastify.css";
import "./Booking.css";

export default function BookingPopup({ stations = [], stationId, onClose, onAdded }) {
  const [termStation, setTermStation] = useState("");
  const [termVehicle, setTermVehicle] = useState("");
  const [showDropdownStation, setShowDropdownStation] = useState(false);
  const [showDropdownVehicle, setShowDropdownVehicle] = useState(false);
  const [vehicleModels, setVehicleModels] = useState([]);
  const [profile, setProfile] = useState(null);
  const [showSuccessPopup, setShowSuccessPopup] = useState(false);

  const [bookingData, setBookingData] = useState({
    stationId: stationId || "",
    vehicleId: "",
    startTime: "",
    currentBattery: 0,
    targetBattery: 0,
  });

  // L·∫•y danh s√°ch xe
  useEffect(() => {
    const fetchVehicleModels = async () => {
      try {
        const res = await getVehicleModels();
        setVehicleModels(res.data || []);
      } catch (error) {
        console.error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch xe", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch xe!");
      }
    };
    fetchVehicleModels();
  }, []);

  // L·∫•y h·ªì s∆° EVDriver
  useEffect(() => {
    const fetchProfile = async () => {
      try {
        const res = await getEVDriverProfile();
        const data = res?.data?.data || res?.data || {};
        setProfile({
          name: data.name,
          phoneNumber: data.phoneNumber,
          selectedVehicles: data.vehicleModelIds || [],
        });
      } catch (error) {
        console.error("Kh√¥ng th·ªÉ l·∫•y h·ªì s∆° ng∆∞·ªùi d√πng", error);
      }
    };
    fetchProfile();
  }, []);

  //  Ki·ªÉm tra quy·ªÅn role
  const role = localStorage.getItem("user_role");
  if (role !== "EVDriver") {
    return (
      <div className="popup-overlay" onClick={onClose}>
        <div className="popup-container" onClick={(e) => e.stopPropagation()}>
          <h3>‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·∫∑t Booking</h3>
          <p>
            Ch·ªâ ng∆∞·ªùi d√πng c√≥ vai tr√≤ <b>EVDriver</b> m·ªõi ƒë∆∞·ª£c ph√©p ƒë·∫∑t.
          </p>
          <button className="cancel-btn" onClick={onClose}>ƒê√≥ng</button>
        </div>
      </div>
    );
  }

  // Ki·ªÉm tra profile ho√†n ch·ªânh
  const isProfileIncomplete =
    !profile ||
    !profile.name ||
    profile.name.trim() === "" ||
    profile.name.includes("Ch∆∞a c·∫≠p nh·∫≠t") ||
    !profile.phoneNumber ||
    profile.phoneNumber.trim() === "" ||
    profile.phoneNumber.includes("Ch∆∞a c·∫≠p nh·∫≠t") ||
    !profile.selectedVehicles ||
    profile.selectedVehicles.length === 0;

  if (isProfileIncomplete) {
    return (
      <div className="popup-overlay" onClick={onClose}>
        <div className="popup-container" onClick={(e) => e.stopPropagation()}>
          <h3> H·ªì s∆° ch∆∞a ho√†n ch·ªânh</h3>
          <p>
            Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªß <b>H·ªç t√™n</b>, <b>S·ªë ƒëi·ªán tho·∫°i</b> v√† <b>Xe</b> tr∆∞·ªõc khi ƒë·∫∑t booking.
          </p>
          <button className="cancel-btn" onClick={onClose}>ƒê√≥ng</button>
        </div>
      </div>
    );
  }

  const normalize = (str = "") =>
    str.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase();

  const escapeRegex = (s) => s.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

  const filteredStations = termStation
    ? stations.filter(
        (st) =>
          normalize(st.stationName).includes(normalize(termStation)) ||
          normalize(st.location).includes(normalize(termStation)) ||
          normalize(st.province).includes(normalize(termStation))
      )
    : stations;

  const filteredVehicles = termVehicle
    ? vehicleModels.filter(
        (v) =>
          normalize(v.modelName).includes(normalize(termVehicle)) ||
          normalize(v.vehicleType).includes(normalize(termVehicle))
      )
    : vehicleModels;

  const handleSelectStation = (st) => {
    setTermStation(st.stationName);
    setBookingData({ ...bookingData, stationId: st.id });
    setShowDropdownStation(false);
  };

  const handleSelectVehicle = (v) => {
    setTermVehicle(`${v.vehicleType} ${v.modelName}`);
    setBookingData({ ...bookingData, vehicleId: v.id });
    setShowDropdownVehicle(false);
  };

  const handleAddBooking = async () => {
    if (!bookingData.stationId || !bookingData.vehicleId || !bookingData.startTime) {
      toast.warning("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin!");
      return;
    }

    const startTimeISO = new Date(bookingData.startTime).toISOString();

    try {
      const res = await addBooking(
        bookingData.stationId,
        bookingData.vehicleId,
        startTimeISO,
        parseInt(bookingData.currentBattery),
        parseInt(bookingData.targetBattery)
      );

      // ‚úÖ N·∫øu API tr·∫£ v·ªÅ message t·ª´ backend (v√≠ d·ª• th√†nh c√¥ng)
      if (res?.data?.message) {
        toast.success(res.data.message);
      }

      setShowSuccessPopup(true);
    } catch (error) {
      console.error("Booking error:", error);

      // ‚úÖ L·∫•y message c·ª• th·ªÉ t·ª´ backend ho·∫∑c object l·ªói
      const msg =
        error?.response?.data?.message ||
        error?.message ||
        "";

      if (msg.includes("B·∫°n ƒë√£ c√≥ booking ƒëang ho·∫°t ƒë·ªông")) {
        toast.warning("‚ö†Ô∏è B·∫°n ƒë√£ c√≥ m·ªôt ƒë∆°n ƒë·∫∑t l·ªãch tr∆∞·ªõc ƒë√≥, vui l√≤ng ho√†n th√†nh ƒë∆°n h√†ng c≈©!");
      } else if (msg.includes("Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i c√°ch hi·ªán t·∫°i")) {
        toast.warning("‚ö†Ô∏è B·∫°n c·∫ßn ƒë·∫∑t l·ªãch s·∫°c tr∆∞·ªõc √≠t nh·∫•t 15 ph√∫t so v·ªõi hi·ªán t·∫°i!");
      } else {
        toast.error("‚ùå L·ªói khi th√™m ƒë·∫∑t l·ªãch s·∫°c ho·∫∑c ch·ªçn sai th·ªùi gian b·∫Øt ƒë·∫ßu!");
      }
    }
  };

  const closeSuccessPopup = () => {
    setShowSuccessPopup(false);
    if (onAdded) onAdded();
    onClose();
  };

  return (
    <div className="popup-overlay" onClick={onClose}>
      <div className="popup-container" onClick={(e) => e.stopPropagation()}>
        <h3>Th√™m Booking M·ªõi</h3>

        <label>Ch·ªçn tr·∫°m:</label>
        <div className="autocomplete-container">
          <input
            type="text"
            placeholder="Nh·∫≠p t√™n tr·∫°m, t·ªânh ho·∫∑c ƒë·ªãa ch·ªâ"
            value={termStation}
            onFocus={() => setShowDropdownStation(true)}
            onChange={(e) => {
              setTermStation(e.target.value);
              setShowDropdownStation(true);
            }}
            className="autocomplete-input"
          />
          {showDropdownStation && filteredStations.length > 0 && (
            <div className="autocomplete-list">
              {filteredStations.map((st) => {
                const regex = new RegExp(`(${escapeRegex(termStation)})`, "i");
                const parts = st.stationName.split(regex);
                return (
                  <div
                    key={st.id}
                    className="autocomplete-item"
                    onClick={() => handleSelectStation(st)}
                  >
                    {parts.map((part, i) =>
                      regex.test(part) ? <span key={i} className="highlight">{part}</span> : part
                    )}{" "}
                    ({st.location}, {st.province})
                  </div>
                );
              })}
            </div>
          )}
        </div>

        <label>Ch·ªçn xe:</label>
        <div className="autocomplete-container">
          <input
            type="text"
            placeholder="Nh·∫≠p t√™n ho·∫∑c h√£ng xe"
            value={termVehicle}
            onFocus={() => setShowDropdownVehicle(true)}
            onChange={(e) => {
              setTermVehicle(e.target.value);
              setShowDropdownVehicle(true);
            }}
            className="autocomplete-input"
          />
          {showDropdownVehicle && filteredVehicles.length > 0 && (
            <div className="autocomplete-list">
              {filteredVehicles.map((v) => {
                const regex = new RegExp(`(${escapeRegex(termVehicle)})`, "i");
                const parts = `${v.vehicleType} ${v.modelName}`.split(regex);
                return (
                  <div
                    key={v.id}
                    className="autocomplete-item"
                    onClick={() => handleSelectVehicle(v)}
                  >
                    {parts.map((part, i) =>
                      regex.test(part) ? <span key={i} className="highlight">{part}</span> : part
                    )}
                  </div>
                );
              })}
            </div>
          )}
        </div>

        <label>Th·ªùi Gian B·∫Øt ƒê·∫ßu</label>
        <input
          type="datetime-local"
          value={bookingData.startTime}
          onChange={(e) => setBookingData({ ...bookingData, startTime: e.target.value })}
        />

        <div className="popup-buttons">
          <button className="add-btn" onClick={handleAddBooking}>X√°c nh·∫≠n</button>
          <button className="cancel-btn" onClick={onClose}>H·ªßy</button>
        </div>
      </div>

      {/* Popup th√†nh c√¥ng */}
      {showSuccessPopup && (
        <div className="popup-overlay">
          <div className="popup-container success-popup" onClick={(e) => e.stopPropagation()}>
            <h3>üéâ ƒê·∫∑t Booking Th√†nh C√¥ng!</h3>
            <p>Booking c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.</p>
            <button className="add-btn" onClick={closeSuccessPopup}>ƒê√≥ng</button>
          </div>
        </div>
      )}

      <ToastContainer position="top-right" autoClose={2000} />
    </div>
  );
}
