import React, { useEffect, useState } from "react";
import { toast } from "react-toastify";
import {
  addChargingPost,
  updateChargingPost,
  deleteChargingPost,
  updateChargingPostStatus,
} from "../../API/ChargingPost";
import { getChargingStation,getChargingStationId } from "../../API/Station"; 
import "./ChargingPost.css";

const ChargingPost = ({ onClose, onUpdated }) => {
  const [stations, setStations] = useState([]);
  const [selectedStation, setSelectedStation] = useState(null);
  const [posts, setPosts] = useState([]);
  const [mode, setMode] = useState(""); // add | edit | delete | status
  const [formData, setFormData] = useState({ postName: "", chargerType: "" });
  const [selectedPost, setSelectedPost] = useState(null);

  const statusMap = {
    InActive: 0,
    Active: 1,
    Busy: 2,
    Maintained: 3,
  };

  // Load danh s√°ch tr·∫°m
    useEffect(() => {
      const fetchStations = async () => {
        try {
          const res = await getChargingStation();
          console.log(" Danh s√°ch tr·∫°m load th√†nh c√¥ng:", res);
          
          
          const stationList = Array.isArray(res.data) ? res.data : [];
          setStations(stationList);
          
          console.log(" Stations set:", stationList);
        } catch (err) {
          console.error(" L·ªói load danh s√°ch tr·∫°m:", err);
          setStations([]);
        }
      };
      fetchStations();
    }, []);


  //  Load tr·ª• theo stationId

    const loadPosts = async (stationId) => {
      if (!stationId) return setPosts([]);
      try {
        console.log("üîÑ ƒêang load tr·ª• theo stationId:", stationId);
        const res = await getChargingStationId(stationId);
        const posts = res?.data?.chargingPosts || [];
        console.log(" Danh s√°ch tr·ª• l·∫•y t·ª´ Station API:", posts);
        setPosts(posts);
      } catch (err) {
        console.error(" L·ªói load tr·ª•:", err);
        setPosts([]);
      }
    };


  // Khi ch·ªçn tr·∫°m
  const handleSelectStation = (id) => {
    const found = stations.find((s) => s.id === id);
    console.log(" Ch·ªçn tr·∫°m:", found);
    setSelectedStation(found || null);
    setSelectedPost(null);
    loadPosts(id);
  };

  // Ch·ªçn tr·ª• ƒë·ªÉ s·ª≠a
  const handleSelectPost = (post) => {
    console.log("Ch·ªçn tr·ª• ƒë·ªÉ s·ª≠a:", post);
    setSelectedPost(post);
    setFormData({ postName: post.postName, chargerType: post.chargerType });
    setMode("edit");
  };

  // Submit th√™m/c·∫≠p nh·∫≠t
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!selectedStation) return toast.warn(" Vui l√≤ng ch·ªçn tr·∫°m tr∆∞·ªõc!");

    try {
      if (selectedPost) {
        console.log(" C·∫≠p nh·∫≠t tr·ª•:", selectedPost.id, formData);
        await updateChargingPost(selectedPost.id, {
          ...formData,
          stationId: selectedStation.id,
        });
        toast.success(" C·∫≠p nh·∫≠t tr·ª• th√†nh c√¥ng!");
      } else {
        console.log("Th√™m tr·ª• m·ªõi:", formData);
        await addChargingPost({
          ...formData,
          stationId: selectedStation.id,
        });
        toast.success(" Th√™m tr·ª• m·ªõi th√†nh c√¥ng!");
      }

      setFormData({ postName: "", chargerType: "" });
      setSelectedPost(null);
      loadPosts(selectedStation.id);
      onUpdated?.();
    } catch (err) {
      console.error(" L·ªói submit:", err);
      toast.error(" Thao t√°c th·∫•t b·∫°i!");
    }
  };

  //  X√≥a tr·ª•
  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a tr·ª• n√†y?")) {
      try {
        console.log(" X√≥a tr·ª• ID:", id);
        await deleteChargingPost(id);
        toast.success("X√≥a tr·ª• th√†nh c√¥ng!");
        loadPosts(selectedStation?.id);
        onUpdated?.();
      } catch (err) {
        console.error(" L·ªói x√≥a:", err);
      }
    }
  };

  //  ƒê·ªïi tr·∫°ng th√°i
  const handleChangeStatus = async (post, newStatusString) => {
    try {
      const numericStatus = statusMap[newStatusString];
      console.log("‚öôÔ∏è ƒê·ªïi tr·∫°ng th√°i tr·ª•:", post.id, "‚Üí", newStatusString);
      await updateChargingPostStatus(post.id, numericStatus);
      toast.success("‚öôÔ∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
      loadPosts(selectedStation?.id);
      onUpdated?.();
    } catch (err) {
      console.error(" L·ªói ƒë·ªïi tr·∫°ng th√°i:", err);
    }
  };

  return (
    <div className="post-popup-overlay">
      <div className="post-popup-box">
        {/* Sidebar */}
        <div className="post-popup-sidebar">
          <button onClick={() => setMode("add")}> Th√™m tr·ª•</button>
          <button onClick={() => setMode("edit")}> C·∫≠p nh·∫≠t</button>
          <button onClick={() => setMode("delete")}> X√≥a</button>
          <button onClick={() => setMode("status")}> Tr·∫°ng th√°i</button>
          <button className="close-btn" onClick={onClose}>
            ƒê√≥ng
          </button>
        </div>

        {/* Content */}
        <div className="post-popup-content">
          <h3> Qu·∫£n l√Ω tr·ª• s·∫°c</h3>

          {/* Dropdown ch·ªçn tr·∫°m */}
          <label>Ch·ªçn tr·∫°m:</label>
          <select
            value={selectedStation?.id || ""}
            onChange={(e) => handleSelectStation(e.target.value)}
          >
            <option value="">-- Ch·ªçn tr·∫°m --</option>
            {stations.map((st) => (
              <option key={st.id} value={st.id}>
                {st.stationName} ({st.province})
              </option>
            ))}
          </select>

          {selectedStation && (
            <h4 style={{ marginTop: "10px" }}>
               ƒêang thao t√°c t·∫°i: <b>{selectedStation.stationName}</b> (
              {selectedStation.province})
            </h4>
          )}

          {!selectedStation && (
            <p className="warning-text">
               Vui l√≤ng ch·ªçn tr·∫°m ƒë·ªÉ hi·ªÉn th·ªã danh s√°ch tr·ª•!
            </p>
          )}

          {/* Khi c√≥ tr·∫°m */}
          {selectedStation && (
            <>
              {/* Th√™m ho·∫∑c s·ª≠a */}
              {(mode === "add" || (mode === "edit" && selectedPost)) && (
                <form onSubmit={handleSubmit} className="post-popup-form">
                  <label>
                    T√™n tr·ª•:
                    <input
                      type="text"
                      value={formData.postName}
                      onChange={(e) =>
                        setFormData({ ...formData, postName: e.target.value })
                      }
                      required
                    />
                  </label>
                  <label>
                    Lo·∫°i s·∫°c:
                    <input
                      type="text"
                      value={formData.chargerType}
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          chargerType: e.target.value,
                        })
                      }
                      required
                    />
                  </label>
                  <button type="submit">
                    {selectedPost ? " L∆∞u c·∫≠p nh·∫≠t" : " Th√™m m·ªõi"}
                  </button>
                </form>
              )}

              {/* Danh s√°ch update */}
              {mode === "edit" && !selectedPost && (
                <div className="post-popup-list">
                  <h4> Danh s√°ch tr·ª• thu·ªôc tr·∫°m n√†y</h4>
                  {posts.length === 0 && <p>Kh√¥ng c√≥ tr·ª• n√†o.</p>}
                  {posts.map((p) => (
                    <div key={p.id} className="post-popup-item">
                      <span>
                        {p.postName} ({p.chargerType})
                      </span>
                      <button onClick={() => handleSelectPost(p)}>
                         Ch·ªçn s·ª≠a
                      </button>
                    </div>
                  ))}
                </div>
              )}

              {/* X√≥a */}
              {mode === "delete" && (
                <div className="post-popup-list">
                  <h4> Danh s√°ch tr·ª• ƒë·ªÉ x√≥a</h4>
                  {posts.length === 0 && <p>Kh√¥ng c√≥ tr·ª• n√†o.</p>}
                  {posts.map((p) => (
                    <div key={p.id} className="post-popup-item">
                      <span>
                        {p.postName} ({p.chargerType})
                      </span>
                      <button onClick={() => handleDelete(p.id)}>X√≥a</button>
                    </div>
                  ))}
                </div>
              )}

              {/* Tr·∫°ng th√°i */}
              {mode === "status" && (
                <div className="post-popup-list">
                  <h4> Tr·∫°ng th√°i c√°c tr·ª• s·∫°c</h4>
                  {posts.length === 0 && <p>Kh√¥ng c√≥ tr·ª• n√†o.</p>}
                  {posts.map((p) => (
                    <div key={p.id} className="post-popup-item">
                      <span>{p.postName}</span>
                      <select
                        value={p.status || "InActive"}
                        onChange={(e) => handleChangeStatus(p, e.target.value)}
                      >
                        <option value="InActive">Inactive</option>
                        <option value="Active">Active</option>
                        <option value="Busy">Busy</option>
                        <option value="Maintained">Maintained</option>
                      </select>
                      <span className="status-label">
                        {p.status || "InActive"}
                      </span>
                    </div>
                  ))}
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChargingPost;
