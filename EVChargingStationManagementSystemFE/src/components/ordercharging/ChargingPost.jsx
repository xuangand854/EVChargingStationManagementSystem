import React, { useEffect, useState } from "react";
import { ToastContainer, toast } from "react-toastify";
import {
  getAllChargingPost,
  addChargingPost,
  updateChargingPost,
  deleteChargingPost,
  updateChargingPostStatus,
} from "../../API/ChargingPost";
import "./ChargingPost.css";

const ChargingPost = ({ stationId, onClose,onUpdated,onReloadPosts }) => {
  const [posts, setPosts] = useState([]);
  const [selectedAction, setSelectedAction] = useState("");
  const [formData, setFormData] = useState({
    postName: "",
    chargerType: "",
    stationId: stationId || "",
  });
  const [editingPost, setEditingPost] = useState(null);

const loadPosts = async () => {
  try {
    const res = await getAllChargingPost(stationId);
    console.log("D·ªØ li·ªáu tr·∫£ v·ªÅ:", res);
    setPosts(res || []); // ‚úÖ l·∫•y ƒë√∫ng m·∫£ng data b√™n trong
  } catch (err) {
    console.error("L·ªói load post:", err);
  }
};

  useEffect(() => {
    loadPosts();
  }, [stationId]); // ‚úÖ ch·ªâ load 1 l·∫ßn

  // Submit (Add / Update) 
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingPost) {
        await updateChargingPost(editingPost.id, formData);
        alert(" C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        if (onUpdated) onUpdated();
      } else {
        await addChargingPost(formData);
        alert(" Th√™m m·ªõi th√†nh c√¥ng!");
        
      }
      setFormData({ postName: "", chargerType: "", stationId: stationId || "" });
      setEditingPost(null);
      loadPosts();
    } catch (err) {
      console.error("L·ªói submit:", err);
      alert("‚ùå Thao t√°c th·∫•t b·∫°i!");
    }
  };

  //  X√≥a 
  const handleDelete = async (id) => {
    if (window.confirm("X√°c nh·∫≠n x√≥a tr·ª• n√†y?")) {
      try {
        await deleteChargingPost(id);
        alert("üóëÔ∏è X√≥a th√†nh c√¥ng!");
        toast.success("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
        if (onUpdated) onUpdated();
        loadPosts();
      } catch (err) {
        console.error("L·ªói x√≥a:", err);
      }
    }
  };

  // Ch·ªçn ƒë·ªÉ s·ª≠a
  const handleEditClick = (post) => {
    setEditingPost(post);
    setFormData({
      postName: post.postName,
      chargerType: post.chargerType,
      stationId: post.stationId,
    });
    setSelectedAction("update");
  };

  //  ƒê·ªïi tr·∫°ng th√°i 
const handleChangeStatus = async (post, newStatusString) => {
  try {
    const numericStatus = statusMap[newStatusString]; // map string ‚Üí number
    await updateChargingPostStatus(post.id, numericStatus);
    alert("‚öôÔ∏è ƒê·ªïi tr·∫°ng th√°i th√†nh c√¥ng!");
    toast.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng!");
    console.log("G·ª≠i update:", { id: post.id, numericStatus });


    // C·∫≠p nh·∫≠t FE ngay
    setPosts((prev) =>
      prev.map((p) =>
        p.id === post.id ? { ...p, status: newStatusString} : p
      )
    );
    onReloadPosts?.();
    
    
  } catch (err) {
    console.error("L·ªói ƒë·ªïi tr·∫°ng th√°i:", err);
    
  }
};


const statusMap = {
  InActive: 0,
  Active: 1,
  Busy: 2,
  Maintained: 3,
  
};
  return (
    <div className="post-popup-overlay">
      <div className="post-popup-box">
        <div className="post-popup-sidebar">
          <button onClick={() => setSelectedAction("add")}> Th√™m tr·ª•</button>
          <button onClick={() => setSelectedAction("update")}> C·∫≠p nh·∫≠t</button>
          <button onClick={() => setSelectedAction("delete")}>X√≥a</button>
          <button onClick={() => setSelectedAction("status")}> Tr·∫°ng th√°i</button>
          <button className="close-btn" onClick={onClose}> ƒê√≥ng</button>
          
        </div>

        <div className="post-popup-content">
          {!selectedAction && <p>üëâ H√£y ch·ªçn thao t√°c b√™n tr√°i.</p>}

          {/* ADD / UPDATE FORM  */}
          {(selectedAction === "add" || (selectedAction === "update" && editingPost)) && (
            <form onSubmit={handleSubmit} className="post-popup-form">
              <label>
                ID Tr·∫°m:
                <input
                  type="text"
                  placeholder="Nh·∫≠p Station ID"
                  value={formData.stationId}
                  onChange={(e) => setFormData({ ...formData, stationId: e.target.value })}
                  disabled={selectedAction === "update"} 
                />
              </label>

              <label>
                T√™n tr·ª•:
                <input
                  type="text"
                  value={formData.postName}
                  onChange={(e) => setFormData({ ...formData, postName: e.target.value })}
                  required
                />
              </label>

              <label>
                Lo·∫°i s·∫°c:
                <input
                  type="text"
                  value={formData.chargerType}
                  onChange={(e) => setFormData({ ...formData, chargerType: e.target.value })}
                  required
                />
              </label>

              <button type="submit">
                {editingPost ? "üíæ L∆∞u c·∫≠p nh·∫≠t" : "‚ûï Th√™m m·ªõi"}
              </button>
            </form>
          )}

          {/*  UPDATE LIST  */}
          {selectedAction === "update" && (
            <div className="post-popup-list">
              <h4>Danh s√°ch tr·ª• s·∫°c</h4>
              {posts.map((p) => (
                <div key={p.id} className="post-popup-item">
                  <span>{p.postName} ({p.chargerType})</span>
                  <button onClick={() => handleEditClick(p)}>‚úèÔ∏è Ch·ªçn s·ª≠a</button>
                </div>
              ))}
            </div>
          )}

          {/*  DELETE LIST  */}
          {selectedAction === "delete" && (
            <div className="post-popup-list">
              <h4>Danh s√°ch tr·ª• ƒë√£ th√™m</h4>
              {posts.map((p) => (
                <div key={p.id} className="post-popup-item">
                  <span>{p.postName} ({p.chargerType})</span>
                  <button onClick={() => handleDelete(p.id)}>üóëÔ∏è X√≥a</button>
                </div>
              ))}
            </div>
          )}

          {/*  STATUS LIST  */}
            {selectedAction === "status" && (
              <div className="post-popup-list">
                <h4>Tr·∫°ng th√°i c√°c tr·ª• s·∫°c</h4>
                {posts.map((p) => (
                  <div key={p.id} className="post-popup-item">
                    <span>{p.postName}</span>
                    <select
                      value={p.status || "InActive"}  
                      onChange={(e) => handleChangeStatus(p, e.target.value)}
                    >
                      <option value="InActive">Inactive</option>
                      <option value="Active">Active</option>
                      <option value="Busy">Busy</option>
                      <option value="Maintained">Maintained</option>
                    </select>
                    <span className="status-label">
                      {p.status || "InActive"} 
                    </span>
                  </div>
                ))}
              </div>
            )}


        </div>
      </div>
    </div>
  );
};

export default ChargingPost;
