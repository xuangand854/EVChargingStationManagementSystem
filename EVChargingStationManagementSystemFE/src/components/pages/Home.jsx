import React, { useState } from "react";
import "./Home.css";
import { MapContainer, TileLayer, Marker, Popup ,useMap} from "react-leaflet";
import "leaflet/dist/leaflet.css";
import L from "leaflet";
import markerIcon2x from "leaflet/dist/images/marker-icon-2x.png";
import markerIcon from "leaflet/dist/images/marker-icon.png";
import markerShadow from "leaflet/dist/images/marker-shadow.png";

delete L.Icon.Default.prototype._getIconUrl;

L.Icon.Default.mergeOptions({
  iconRetinaUrl: markerIcon2x,
  iconUrl: markerIcon,
  shadowUrl: markerShadow,
});
// Component ƒë·ªÉ zoom t·ªõi station khi ch·ªçn
const FlyToStation = ({ station }) => {
  const map = useMap();
  if (station?.coords) {
    map.flyTo(station.coords, 15); // CH·ªàNH ·ªû ƒê√ÇY: bay t·ªõi v·ªã tr√≠ station
  }
  return null;
};


const Home = () => {
    
    const [stations] = useState([
        { id: 1, name: "Station A", address: "123 Main St, HCM", slots: 5, coords: [10.78, 106.70]},
        { id: 2, name: "Station B", address: "456 Elm St, HCM", slots: 3 , coords: [10.775, 106.705]},
        { id: 3, name: "Station C", address: "789 Oak St, HCM", slots: 0 , coords: [10.77, 106.695]},
    ]);
    const [selectedStation, setSelectedStation] = useState(null);
    const [bookingTime, setBookingTime] = useState("");
    const [suggestions, setSuggestions] = useState([]);

    // Gi·∫£ l·∫≠p API t√¨m ki·∫øm tr·∫°m s·∫°c
    // const handleSearch = (value) => {
    //     setLocation(value);
    //     const mockStations = [
    //         { id: 1, name: "Station A", address: "123 Main St, HCM", slots: 5, coords: [10.78, 106.70]},
    //         { id: 2, name: "Station B", address: "456 Elm St, HCM", slots: 3 , coords: [10.775, 106.705]},
    //         { id: 3, name: "Station C", address: "789 Oak St, HCM", slots: 0 , coords: [10.77, 106.695]},
    //     ];
        
    //     if (value) {
    //         const filtered = mockStations.filter(
    //             (s) =>
    //                 s.name.toLowerCase().includes(value.toLowerCase()) ||
    //                 s.address.toLowerCase().includes(value.toLowerCase())
    //         );
    //         setStations(filtered);
    //         setSuggestions(filtered);
    //     } else {
    //         setStations(mockStations);
    //         setSuggestions([]);
    //     }
    // };
    // Khi ch·ªçn station
        const handleSelectStation = (station) => {
            setSelectedStation(station);
            
            setSuggestions([]);
        };



    // X·ª≠ l√Ω ƒë·∫∑t slot s·∫°c
    const handleBooking = () => {
        if (!selectedStation || !bookingTime) {
            alert("Please select a station and time to book.");
            return;
        }
        alert(`Slot booked at ${selectedStation.name} for ${bookingTime}`);
    };

    return (
        <div className="fullpage-container">
            {/* Hero Section */}
            <section className="section section-hero" id="hero">
                <header className="home-hero">
                    <div className="hero-content">
                        <h1>
                            <span className="brand-orange">S·∫°c xe ƒëi·ªán th√¥ng minh</span>
                            <span className="brand-gradient"> EVOne</span>
                        </h1>
                        <p>T√¨m, ƒë·∫∑t ch·ªó v√† s·∫°c nhanh ·ªü m·ªçi n∆°i b·∫°n ƒë·∫øn.</p>
                        <div className="hero-actions">
                            <button className="btn btn-primary" onClick={() => document.querySelector('#discover')?.scrollIntoView({ behavior: 'smooth' })}>Kh√°m ph√° ngay</button>
                            <button className="btn btn-ghost" onClick={() => document.querySelector('#search')?.scrollIntoView({ behavior: 'smooth' })}>T√¨m tr·∫°m s·∫°c</button>
                        </div>
                    </div>
                    <div className="hero-visual" aria-hidden>
                        <div className="glow"></div>
                        <svg className="hero-illustration" viewBox="0 0 520 360" fill="none" xmlns="http://www.w3.org/2000/svg">
                            {/* N·ªÅn m·ªù */}
                            <defs>
                                <linearGradient id="g1" x1="0" y1="0" x2="1" y2="1">
                                    <stop offset="0%" stopColor="#ff7e5f" stopOpacity="0.7" />
                                    <stop offset="100%" stopColor="#feb47b" stopOpacity="0.6" />
                                </linearGradient>
                                <linearGradient id="g2" x1="0" y1="0" x2="1" y2="0">
                                    <stop offset="0%" stopColor="#ffac81" />
                                    <stop offset="100%" stopColor="#ff8a5c" />
                                </linearGradient>
                            </defs>
                            <g filter="url(#f)" opacity="0.15">
                                <ellipse cx="360" cy="240" rx="150" ry="90" fill="url(#g1)" />
                            </g>
                            {/* Tr·ª• s·∫°c */}
                            <rect x="320" y="90" width="70" height="170" rx="10" fill="rgba(255,255,255,0.9)" stroke="#ff9a5f" strokeWidth="2" />
                            <rect x="335" y="110" width="40" height="40" rx="6" fill="#fff1e8" stroke="#ff9a5f" />
                            <circle cx="355" cy="130" r="8" fill="#ff9a5f" />
                            <rect x="345" y="165" width="20" height="60" rx="4" fill="url(#g2)" />
                            {/* D√¢y s·∫°c */}
                            <path d="M340 200 C 300 210, 280 230, 260 245" stroke="#ff9a5f" strokeWidth="4" fill="none" strokeLinecap="round" />
                            {/* Xe ƒëi·ªán t·ªëi gi·∫£n */}
                            <g transform="translate(170,230)">
                                <rect x="0" y="20" width="130" height="40" rx="10" fill="#ffffff" stroke="#ff9a5f" strokeWidth="2" />
                                <rect x="20" y="0" width="90" height="30" rx="10" fill="#fff6ef" stroke="#ff9a5f" strokeWidth="2" />
                                <circle cx="30" cy="70" r="12" fill="#1f2937" stroke="#ff9a5f" strokeWidth="2" />
                                <circle cx="110" cy="70" r="12" fill="#1f2937" stroke="#ff9a5f" strokeWidth="2" />
                                <rect x="118" y="32" width="12" height="8" fill="#ff9a5f" />
                            </g>
                            {/* Filter nh·∫π */}
                            <filter id="f">
                                <feGaussianBlur in="SourceGraphic" stdDeviation="20" />
                            </filter>
                        </svg>
                    </div>
                </header>

                {/* Navigation Dots */}
                <ul className="nav-dots">
                    <li><button type="button" aria-label="Hero" onClick={() => document.querySelector('#hero')?.scrollIntoView({ behavior: 'smooth' })}></button></li>
                    <li><button type="button" aria-label="T√≠nh nƒÉng" onClick={() => document.querySelector('#discover')?.scrollIntoView({ behavior: 'smooth' })}></button></li>
                    <li><button type="button" aria-label="T√¨m ki·∫øm" onClick={() => document.querySelector('#search')?.scrollIntoView({ behavior: 'smooth' })}></button></li>
                    {selectedStation && <li><button type="button" aria-label="ƒê·∫∑t ch·ªó" onClick={() => document.querySelector('#booking')?.scrollIntoView({ behavior: 'smooth' })}></button></li>}
                </ul>
            </section>

            {/* Features Section */}
            <section className="section section-features" id="discover">
                <section className="home-features">
                    <h2 className="section-title">V√¨ sao ch·ªçn <span className="brand-gradient">EVOne</span>?</h2>
                    <div className="features-grid">
                        <div className="feature-card">
                            <div className="icon">üîç</div>
                            <h3>T√¨m tr·∫°m s·∫°c</h3>
                            <p>T√¨m tr·∫°m s·∫°c g·∫ßn b·∫°n theo v·ªã tr√≠ ho·∫∑c ƒëi·ªÉm ƒë·∫øn, c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c.</p>
                        </div>
                        <div className="feature-card">
                            <div className="icon">üìÖ</div>
                            <h3>ƒê·∫∑t l·ªãch tr∆∞·ªõc</h3>
                            <p>ƒê·∫∑t ch·ªó nhanh ch√≥ng ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ tr·∫°m s·∫°c khi b·∫°n ƒë·∫øn n∆°i.</p>
                        </div>
                        <div className="feature-card">
                            <div className="icon">‚ö°</div>
                            <h3>S·∫°c nhanh</h3>
                            <p>H·ªó tr·ª£ nhi·ªÅu chu·∫©n s·∫°c nhanh v·ªõi tr·∫£i nghi·ªám m∆∞·ª£t m√† v√† an to√†n.</p>
                        </div>
                        <div className="feature-card">
                            <div className="icon">üìä</div>
                            <h3>Realtime</h3>
                            <p>Tr·∫°ng th√°i tr·∫°m s·∫°c, c√¥ng su·∫•t v√† chi ph√≠ hi·ªÉn th·ªã theo th·ªùi gian th·ª±c.</p>
                        </div>
                    </div>
                </section>
            </section>

                    {/* Search Section */}
                    <section className="section section-search" id="search">
                    <section className="home-search">
                        <h2 className="section-title">T√¨m tr·∫°m s·∫°c g·∫ßn b·∫°n</h2>

                        {/* N√∫t m·ªü popup ch·ªçn tr·∫°m */}
                        <div className="search-bar">
                        <button 
                            className="btn btn-primary" 
                            onClick={() => setSuggestions(stations)} // m·ªü danh s√°ch trong popup
                        >
                            Ch·ªçn tr·∫°m s·∫°c
                        </button>
                        </div>

                        {/* Popup danh s√°ch tr·∫°m */}
                        {suggestions.length > 0 && (
                        <div className="popup-overlay">
                            <div className="popup-content">
                            <h3>Danh s√°ch tr·∫°m</h3>
                            <ul className="station-select-list">
                                {suggestions.map((station) => (
                                <li 
                                    key={station.id} 
                                    onClick={() => {
                                    handleSelectStation(station);
                                    setSuggestions([]); // ƒë√≥ng popup
                                    }}
                                >
                                    <b>{station.name}</b> - {station.address}
                                </li>
                                ))}
                            </ul>
                            <button 
                                className="btn btn-secondary" 
                                onClick={() => setSuggestions([])} // ƒë√≥ng popup khi b·∫•m h·ªßy
                            >
                                ƒê√≥ng
                            </button>
                            </div>
                        </div>
                        )}

                        {/* OpenStreetMap Integration */}
                        <div className="map-container">
                        <MapContainer 
                            center={[10.7769, 106.7009]} // Default H·ªì Ch√≠ Minh
                            zoom={13} 
                            style={{ height: "400px", width: "100%", marginTop: "20px", borderRadius: "12px" }}
                        >
                            <TileLayer
                            attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                            />

                            {/* Hi·ªÉn th·ªã t·∫•t c·∫£ marker */}
                            {stations.map((station) => (
                            <Marker 
                                key={station.id} 
                                position={station.coords}
                                eventHandlers={{
                                click: () => handleSelectStation(station), // Click v√†o marker -> ch·ªçn
                                }}
                            >
                                <Popup>
                                <b>{station.name}</b><br />
                                {station.address}<br />
                                Slots: {station.slots}
                                </Popup>
                            </Marker>
                            ))}

                            {/* Khi c√≥ station ƒë∆∞·ª£c ch·ªçn th√¨ bay ƒë·∫øn */}
                            {selectedStation && <FlyToStation station={selectedStation} />}
                        </MapContainer>
                        </div>
                    </section>
                    </section>



            {/* Booking Section (conditional) */}
            {selectedStation && (
                <section className="section section-booking" id="booking">
                    <section className="home-booking">
                        <h2 className="section-title">ƒê·∫∑t l·ªãch s·∫°c</h2>
                        <div className="booking-card">
                            <div className="booking-info">
                                <h3>{selectedStation.name}</h3>
                                <p>{selectedStation.address}</p>
                            </div>
                            <div className="booking-action">
                                <input
                                    type="datetime-local"
                                    value={bookingTime}
                                    onChange={(e) => setBookingTime(e.target.value)}
                                />
                                <button className="btn btn-primary" onClick={handleBooking}>ƒê·∫∑t ch·ªó</button>
                            </div>
                        </div>
                    </section>
                </section>
            )}
        </div>
    );
};

export default Home;