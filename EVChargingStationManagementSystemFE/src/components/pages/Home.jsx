import React, { useState } from "react";
import "./Home.css";
//xin chao

const Home = () => {
    const [location, setLocation] = useState("");
    const [stations, setStations] = useState([]);
    const [selectedStation, setSelectedStation] = useState(null);
    const [bookingTime, setBookingTime] = useState("");

    // Gi·∫£ l·∫≠p API t√¨m ki·∫øm tr·∫°m s·∫°c
    const handleSearch = () => {
        const mockStations = [
            { id: 1, name: "Station A", address: "123 Main St", slots: 5 },
            { id: 2, name: "Station B", address: "456 Elm St", slots: 3 },
            { id: 3, name: "Station C", address: "789 Oak St", slots: 0 },
        ];
        setStations(mockStations);
    };

    // X·ª≠ l√Ω ƒë·∫∑t slot s·∫°c
    const handleBooking = () => {
        if (!selectedStation || !bookingTime) {
            alert("Please select a station and time to book.");
            return;
        }
        alert(`Slot booked at ${selectedStation.name} for ${bookingTime}`);
    };

    return (
        <div className="fullpage-container">
            {/* Hero Section */}
            <section className="section section-hero" id="hero">
                <header className="home-hero">
                    <div className="hero-content">
                        <h1>
                            <span className="brand-orange">S·∫°c xe ƒëi·ªán th√¥ng minh</span>
                            <span className="brand-gradient"> EVOne</span>
                        </h1>
                        <p>T√¨m, ƒë·∫∑t ch·ªó v√† s·∫°c nhanh ·ªü m·ªçi n∆°i b·∫°n ƒë·∫øn.</p>
                        <div className="hero-actions">
                            <button className="btn btn-primary" onClick={() => document.querySelector('#discover')?.scrollIntoView({ behavior: 'smooth' })}>Kh√°m ph√° ngay</button>
                            <button className="btn btn-ghost" onClick={() => document.querySelector('#search')?.scrollIntoView({ behavior: 'smooth' })}>T√¨m tr·∫°m s·∫°c</button>
                        </div>
                    </div>
                    <div className="hero-visual" aria-hidden>
                        <div className="glow"></div>
                        <svg className="hero-illustration" viewBox="0 0 520 360" fill="none" xmlns="http://www.w3.org/2000/svg">
                            {/* N·ªÅn m·ªù */}
                            <defs>
                                <linearGradient id="g1" x1="0" y1="0" x2="1" y2="1">
                                    <stop offset="0%" stopColor="#ff7e5f" stopOpacity="0.7" />
                                    <stop offset="100%" stopColor="#feb47b" stopOpacity="0.6" />
                                </linearGradient>
                                <linearGradient id="g2" x1="0" y1="0" x2="1" y2="0">
                                    <stop offset="0%" stopColor="#ffac81" />
                                    <stop offset="100%" stopColor="#ff8a5c" />
                                </linearGradient>
                            </defs>
                            <g filter="url(#f)" opacity="0.15">
                                <ellipse cx="360" cy="240" rx="150" ry="90" fill="url(#g1)" />
                            </g>
                            {/* Tr·ª• s·∫°c */}
                            <rect x="320" y="90" width="70" height="170" rx="10" fill="rgba(255,255,255,0.9)" stroke="#ff9a5f" strokeWidth="2" />
                            <rect x="335" y="110" width="40" height="40" rx="6" fill="#fff1e8" stroke="#ff9a5f" />
                            <circle cx="355" cy="130" r="8" fill="#ff9a5f" />
                            <rect x="345" y="165" width="20" height="60" rx="4" fill="url(#g2)" />
                            {/* D√¢y s·∫°c */}
                            <path d="M340 200 C 300 210, 280 230, 260 245" stroke="#ff9a5f" strokeWidth="4" fill="none" strokeLinecap="round" />
                            {/* Xe ƒëi·ªán t·ªëi gi·∫£n */}
                            <g transform="translate(170,230)">
                                <rect x="0" y="20" width="130" height="40" rx="10" fill="#ffffff" stroke="#ff9a5f" strokeWidth="2" />
                                <rect x="20" y="0" width="90" height="30" rx="10" fill="#fff6ef" stroke="#ff9a5f" strokeWidth="2" />
                                <circle cx="30" cy="70" r="12" fill="#1f2937" stroke="#ff9a5f" strokeWidth="2" />
                                <circle cx="110" cy="70" r="12" fill="#1f2937" stroke="#ff9a5f" strokeWidth="2" />
                                <rect x="118" y="32" width="12" height="8" fill="#ff9a5f" />
                            </g>
                            {/* Filter nh·∫π */}
                            <filter id="f">
                                <feGaussianBlur in="SourceGraphic" stdDeviation="20" />
                            </filter>
                        </svg>
                    </div>
                </header>

                {/* Navigation Dots */}
                <ul className="nav-dots">
                    <li><button type="button" aria-label="Hero" onClick={() => document.querySelector('#hero')?.scrollIntoView({ behavior: 'smooth' })}></button></li>
                    <li><button type="button" aria-label="T√≠nh nƒÉng" onClick={() => document.querySelector('#discover')?.scrollIntoView({ behavior: 'smooth' })}></button></li>
                    <li><button type="button" aria-label="T√¨m ki·∫øm" onClick={() => document.querySelector('#search')?.scrollIntoView({ behavior: 'smooth' })}></button></li>
                    {selectedStation && <li><button type="button" aria-label="ƒê·∫∑t ch·ªó" onClick={() => document.querySelector('#booking')?.scrollIntoView({ behavior: 'smooth' })}></button></li>}
                </ul>
            </section>

            {/* Features Section */}
            <section className="section section-features" id="discover">
                <section className="home-features">
                    <h2 className="section-title">V√¨ sao ch·ªçn <span className="brand-gradient">EVOne</span>?</h2>
                    <div className="features-grid">
                        <div className="feature-card">
                            <div className="icon">üîç</div>
                            <h3>T√¨m tr·∫°m s·∫°c</h3>
                            <p>T√¨m tr·∫°m s·∫°c g·∫ßn b·∫°n theo v·ªã tr√≠ ho·∫∑c ƒëi·ªÉm ƒë·∫øn, c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c.</p>
                        </div>
                        <div className="feature-card">
                            <div className="icon">üìÖ</div>
                            <h3>ƒê·∫∑t l·ªãch tr∆∞·ªõc</h3>
                            <p>ƒê·∫∑t ch·ªó nhanh ch√≥ng ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ tr·∫°m s·∫°c khi b·∫°n ƒë·∫øn n∆°i.</p>
                        </div>
                        <div className="feature-card">
                            <div className="icon">‚ö°</div>
                            <h3>S·∫°c nhanh</h3>
                            <p>H·ªó tr·ª£ nhi·ªÅu chu·∫©n s·∫°c nhanh v·ªõi tr·∫£i nghi·ªám m∆∞·ª£t m√† v√† an to√†n.</p>
                        </div>
                        <div className="feature-card">
                            <div className="icon">üìä</div>
                            <h3>Realtime</h3>
                            <p>Tr·∫°ng th√°i tr·∫°m s·∫°c, c√¥ng su·∫•t v√† chi ph√≠ hi·ªÉn th·ªã theo th·ªùi gian th·ª±c.</p>
                        </div>
                    </div>
                </section>
            </section>

            {/* Search Section */}
            <section className="section section-search" id="search">
                <section className="home-search">
                    <h2 className="section-title">T√¨m tr·∫°m s·∫°c g·∫ßn b·∫°n</h2>
                    <div className="search-bar">
                        <input
                            type="text"
                            placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm, qu·∫≠n, t·ªânh..."
                            value={location}
                            onChange={(e) => setLocation(e.target.value)}
                        />
                        <button className="btn btn-primary" onClick={handleSearch}>T√¨m ki·∫øm</button>
                    </div>
                    <div className="station-list">
                        {stations.map((station) => (
                            <div
                                key={station.id}
                                className={`station ${station.slots > 0 ? "available" : "unavailable"}`}
                                onClick={() => setSelectedStation(station)}
                            >
                                <div className="station-header">
                                    <h3>{station.name}</h3>
                                    <span className={`badge ${station.slots > 0 ? 'ok' : 'bad'}`}>{station.slots > 0 ? 'C√≤n ch·ªó' : 'H·∫øt ch·ªó'}</span>
                                </div>
                                <p>{station.address}</p>
                                <div className="station-meta">
                                    <span>Slots: {station.slots}</span>
                                    <button className="btn btn-ghost sm">Chi ti·∫øt</button>
                                </div>
                            </div>
                        ))}
                    </div>
                </section>
            </section>

            {/* Booking Section (conditional) */}
            {selectedStation && (
                <section className="section section-booking" id="booking">
                    <section className="home-booking">
                        <h2 className="section-title">ƒê·∫∑t l·ªãch s·∫°c</h2>
                        <div className="booking-card">
                            <div className="booking-info">
                                <h3>{selectedStation.name}</h3>
                                <p>{selectedStation.address}</p>
                            </div>
                            <div className="booking-action">
                                <input
                                    type="datetime-local"
                                    value={bookingTime}
                                    onChange={(e) => setBookingTime(e.target.value)}
                                />
                                <button className="btn btn-primary" onClick={handleBooking}>ƒê·∫∑t ch·ªó</button>
                            </div>
                        </div>
                    </section>
                </section>
            )}
        </div>
    );
};

export default Home;