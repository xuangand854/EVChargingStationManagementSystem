import React, { useState, useEffect } from "react";
import "./Profile.css";
import { updateEVDriver, getEVDriverProfile } from "../../API/EVDriver";
import { getVehicleModels } from "../../API/Admin";
import { changePassword } from "../../API/Auth";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const defaultAvatars = {
  customer: "https://cdn-icons-png.flaticon.com/512/847/847969.png",
  staff: "https://cdn-icons-png.flaticon.com/512/847/847969.png",
  admin: "https://cdn-icons-png.flaticon.com/512/847/847969.png",
};

const Profile = () => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [mode, setMode] = useState("view");
  const [showPopup, setShowPopup] = useState("");
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    role: "",
    address: "",
    avatar: "",
    driverId: "",
  });
  const [passwordData, setPasswordData] = useState({
    oldPassword: "",
    newPassword: "",
    confirmPassword: "",
  });
  const [vehicleModels, setVehicleModels] = useState([]);
  const [selectedVehicles, setSelectedVehicles] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await getEVDriverProfile();
        const driver = res?.data?.data || res?.data;

        if (driver) {
          const userData = {
            name: driver.name || "Ch∆∞a c·∫≠p nh·∫≠t",
            email: driver.email || "Ch∆∞a c·∫≠p nh·∫≠t",
            phone: driver.phoneNumber || "Ch∆∞a c·∫≠p nh·∫≠t",
            role: driver.role || "customer",
            avatar: driver.profilePictureUrl || "",
            address: driver.address || "Ch∆∞a c·∫≠p nh·∫≠t",
            driverId: driver.id,
            vehicleModelIds: driver.vehicleModelIds || [],
          };
          setUser(userData);
          setFormData(userData);
          setSelectedVehicles([...userData.vehicleModelIds]);
        } else {
          toast.warn("Kh√¥ng c√≥ d·ªØ li·ªáu t√†i x·∫ø!");
        }

        const modelRes = await getVehicleModels();
        setVehicleModels(modelRes?.data || []);
      } catch (err) {
        console.error("L·ªói khi load d·ªØ li·ªáu:", err);
        toast.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t√†i x·∫ø!");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

    const handleSaveProfile = async () => {
      try {
        if (!user?.driverId) {
          toast.error("Kh√¥ng t√¨m th·∫•y m√£ t√†i x·∫ø!");
          return;
        }

        // In ra ƒë·ªÉ debug
        console.log(" D·ªØ li·ªáu g·ª≠i l√™n:", {
          driverId: user.driverId,
          name: formData.name,
          phoneNumber: formData.phone,
          address: formData.address || "",
          profilePictureUrl: formData.avatar || "",
          vehicleModelIds: selectedVehicles, //  danh s√°ch ID xe ƒë√£ ch·ªçn
        });

        const res = await updateEVDriver(
          user.driverId,
          formData.name,
          formData.phone,
          formData.address || "",
          formData.avatar || "",
          selectedVehicles
        );

        if (res?.status === 200 || res?.data?.success) {
          toast.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");

          // C·∫≠p nh·∫≠t l·∫°i local state sau khi API OK
          setUser({
            ...formData,
            driverId: user.driverId,
            vehicleModelIds: selectedVehicles,
          });

          setMode("view");
          setShowPopup("");
        } else {
          toast.error(res?.data?.message || "L·ªói c·∫≠p nh·∫≠t!");
        }
      } catch (error) {
        console.error(" L·ªói khi c·∫≠p nh·∫≠t:", error.response?.data || error);
        toast.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i!");
      }
    };


  const handlePasswordChange = async () => {
    const { oldPassword, newPassword, confirmPassword } = passwordData;
    if (!oldPassword || !newPassword || !confirmPassword) {
      toast.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }
    if (newPassword !== confirmPassword) {
      toast.error("M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n kh√¥ng kh·ªõp!");
      return;
    }
    try {
      const res = await changePassword(oldPassword, newPassword, confirmPassword);
      if (res?.status === 200 || res?.success) {
        toast.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
        setPasswordData({ oldPassword: "", newPassword: "", confirmPassword: "" });
        setMode("view");
      } else {
        toast.error(res?.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i!");
      }
    } catch (err) {
      console.error("L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
      toast.error("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng ho·∫∑c c√≥ l·ªói h·ªá th·ªëng!");
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  if (loading) return <p className="loading">ƒêang t·∫£i...</p>;
  if (!user) return <p>Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i x·∫ø</p>;

  // Hi·ªÉn th·ªã t√™n xe
  const selectedVehicleNames = selectedVehicles
    .map((id) => vehicleModels.find((v) => v.id === id)?.modelName)
    .filter(Boolean);

  return (
    <div className="profile-wrapper">
      <ToastContainer position="top-right" autoClose={2000} />

      {/* Sidebar */}
      <div className="profile-sidebar">
        <div className="sidebar-card user-card">
          <div className="avatar-container">
            <img
              src={formData.avatar || defaultAvatars[user.role]}
              alt="avatars"
              className="avatars"
            />
            <button
              className="edit-avatar-icon"
              onClick={() => setShowPopup("avatar")}
              title="ƒê·ªïi ·∫£nh ƒë·∫°i di·ªán"
            >
              üì∑
            </button>
          </div>
          <p className="welcome">Xin ch√†o,</p>
          <h3>{user.name}</h3>
        </div>

        <div className="sidebar-card notice-card">
          <p className="warning">Th√¥ng tin t√†i x·∫ø</p>
          <p className="desc">H√£y c·∫≠p nh·∫≠t ƒë·∫ßy ƒë·ªß ƒë·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª• t·ªët h∆°n.</p>
        </div>
      </div>

      {/* Main */}
      <div className="profile-main">
        <div className="profile-card">
          <div className="profile-header">
            <h2>Th√¥ng tin c√° nh√¢n</h2>
            {mode === "view" && (
              <button className="edit-btn" onClick={() => setMode("edit")}>
                Ch·ªânh s·ª≠a th√¥ng tin
              </button>
            )}
          </div>

          {mode === "view" && (
            <div className="profile-info">
              <div className="info-row">
                <span className="label">H·ªç v√† t√™n</span>
                <span>{user.name}</span>
              </div>
              <div className="info-row">
                <span className="label">Email</span>
                <span>{user.email}</span>
              </div>
              <div className="info-row">
                <span className="label">S·ªë ƒëi·ªán tho·∫°i</span>
                <span>{user.phone}</span>
              </div>
              <div className="info-row">
                <span className="label">ƒê·ªãa ch·ªâ</span>
                <span>{user.address}</span>
              </div>
              <div className="info-row vehicle-row">
                <span className="label">Xe</span>
                <div className="vehicle-right">
                  <span className="info-value">
                    {selectedVehicleNames.length > 0
                      ? selectedVehicleNames.join(", ")
                      : "Ch∆∞a c√≥ xe"}
                  </span>
                  <button
                    className="link-btn"
                    onClick={() => setShowPopup("vehicle")}
                  >
                    Ch·ªânh s·ª≠a
                  </button>
                </div>
              </div>
              <div className="info-row">
                <span className="label">M·∫≠t kh·∫©u</span>
                <button className="link-btn" onClick={() => setMode("password")}>
                  ƒê·ªïi m·∫≠t kh·∫©u
                </button>
              </div>
            </div>
          )}

          {mode === "edit" && (
            <div className="profile-form">
              <h3>T√™n</h3>
              <input type="text" name="name" value={formData.name} onChange={handleInputChange} />
              <h3>Email</h3>
              <input type="email" name="email" value={formData.email} readOnly />
              <h3>S·ªë ƒëi·ªán tho·∫°i</h3>
              <input type="text" name="phone" value={formData.phone} onChange={handleInputChange} />
              <h3>ƒê·ªãa ch·ªâ</h3>
              <input type="text" name="address" value={formData.address} onChange={handleInputChange} />
              <div className="form-buttons">
                <button className="save" onClick={handleSaveProfile}>L∆∞u</button>
                <button className="cancel" onClick={() => setMode("view")}>H·ªßy</button>
              </div>
            </div>
          )}

          {mode === "password" && (
            <div className="profile-form">
              <input type="password" placeholder="M·∫≠t kh·∫©u c≈©" value={passwordData.oldPassword}
                onChange={(e) => setPasswordData({ ...passwordData, oldPassword: e.target.value })} />
              <input type="password" placeholder="M·∫≠t kh·∫©u m·ªõi" value={passwordData.newPassword}
                onChange={(e) => setPasswordData({ ...passwordData, newPassword: e.target.value })} />
              <input type="password" placeholder="X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi" value={passwordData.confirmPassword}
                onChange={(e) => setPasswordData({ ...passwordData, confirmPassword: e.target.value })} />
              <div className="form-buttons">
                <button className="save" onClick={handlePasswordChange}>ƒê·ªïi m·∫≠t kh·∫©u</button>
                <button className="cancel" onClick={() => setMode("view")}>H·ªßy</button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Popup Vehicle */}
      {showPopup && (
        <div className="popup-overlay">
          <div className="popup">
            {showPopup === "avatar" && (
              <>
                <h3>Nh·∫≠p URL ·∫£nh ƒë·∫°i di·ªán</h3>
                <input
                  type="text"
                  placeholder="D√°n link ·∫£nh"
                  value={formData.avatar}
                  onChange={(e) => setFormData((prev) => ({ ...prev, avatar: e.target.value }))}
                />
                <div className="popup-buttons">
                  <button className="save" onClick={async () => { await handleSaveProfile(); setShowPopup(""); }}>L∆∞u</button>
                  <button className="cancel" onClick={() => setShowPopup("")}>H·ªßy</button>
                </div>
              </>
            )}

            {showPopup === "vehicle" && (
              <>
                <h3>Xe ƒë√£ ch·ªçn</h3>
                <div className="selected-vehicles">
                  {selectedVehicles.length === 0 && <p>Ch∆∞a c√≥ xe n√†o</p>}
                  {selectedVehicles.map((vId) => {
                    const vehicle = vehicleModels.find(vm => vm.id === vId);
                    return (
                      <div key={vId} className="vehicle-item">
                        <span>{vehicle?.modelName || vId}</span>
                        <button className="link-btn"
                          onClick={() => setSelectedVehicles(selectedVehicles.filter(id => id !== vId))}>
                          X√≥a
                        </button>
                      </div>
                    );
                  })}
                </div>

                <h3>Nh·ªØng lo·∫°i xe h·ªó tr·ª£</h3>
                <div className="available-vehicles">
                  {vehicleModels.map((vm) => (
                    <div key={vm.id} className="vehicle-item">
                      <span>{vm.modelName}</span>
                      {!selectedVehicles.includes(vm.id) && (
                        <button className="link-btn"
                          onClick={() => setSelectedVehicles([...selectedVehicles, vm.id])}>
                          Ch·ªçn
                        </button>
                      )}
                    </div>
                  ))}
                </div>

                <div className="popup-buttons">
                  <button className="save" onClick={async () => { await handleSaveProfile(); setShowPopup(""); }}>L∆∞u</button>
                  <button className="cancel" onClick={() => setShowPopup("")}>H·ªßy</button>
                </div>
              </>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Profile;
